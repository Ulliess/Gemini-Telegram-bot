import logging
import re
import os
from dotenv import load_dotenv
load_dotenv()
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
import google.generativeai as genai
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π API –∫–ª—é—á –æ—Ç Gemini
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
# ================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-2.5-flash')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
chat_histories = {}

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
TEMP_DIR = Path("temp_files")
TEMP_DIR.mkdir(exist_ok=True)

def format_text(text):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ markdown –≤ HTML –¥–ª—è Telegram"""
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ ### –¢–µ–∫—Å—Ç -> <b>–¢–µ–∫—Å—Ç</b>
    text = re.sub(r'###\s+(.+)', r'<b>\1</b>', text)
    # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç **—Ç–µ–∫—Å—Ç** -> <b>—Ç–µ–∫—Å—Ç</b>
    text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text)
    # –°–ø–∏—Å–∫–∏: –∑–∞–º–µ–Ω–∏–º "* " –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ "‚Ä¢ "
    text = re.sub(r'^\s*\*\s+', '‚Ä¢ ', text, flags=re.MULTILINE)
    # –ö—É—Ä—Å–∏–≤ *—Ç–µ–∫—Å—Ç* -> <i>—Ç–µ–∫—Å—Ç</i>
    text = re.sub(r'\*(.+?)\*', r'<i>\1</i>', text)
    return text

async def send_long_message(context, chat_id, text, parse_mode='HTML'):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    max_length = 4000
    if len(text) > max_length:
        parts = [text[i:i+max_length] for i in range(0, len(text), max_length)]
        for part in parts:
            await context.bot.send_message(
                chat_id=chat_id,
                text=part,
                parse_mode=parse_mode
            )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            parse_mode=parse_mode
        )

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    chat_histories[chat_id] = []
    
    await context.bot.send_message(
        chat_id=chat_id,
        text="–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å Gemini AI.\n\n"
             "–Ø —É–º–µ—é:\n"
             "üìù –û–±—â–∞—Ç—å—Å—è –∏ –ø–æ–º–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã\n"
             "üì∑ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏\n"
             "üìÑ –ß–∏—Ç–∞—Ç—å PDF –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã\n"
             "üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
             "–ö–æ–º–∞–Ω–¥—ã:\n"
             "/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n"
             "/start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
    )

# –ö–æ–º–∞–Ω–¥–∞ /clear
async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    chat_histories[chat_id] = []
    
    await context.bot.send_message(
        chat_id=chat_id,
        text="‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_message = update.message.text
    
    if chat_id not in chat_histories:
        chat_histories[chat_id] = []
    
    await context.bot.send_chat_action(chat_id=chat_id, action="typing")
    
    try:
        chat_histories[chat_id].append({
            'role': 'user',
            'parts': [user_message]
        })
        
        chat = model.start_chat(history=chat_histories[chat_id][:-1])
        response = chat.send_message(user_message)
        bot_reply = response.text
        
        chat_histories[chat_id].append({
            'role': 'model',
            'parts': [bot_reply]
        })
        
        formatted_reply = format_text(bot_reply)
        await send_long_message(context, chat_id, formatted_reply)
        
    except Exception as e:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    
    if chat_id not in chat_histories:
        chat_histories[chat_id] = []
    
    await context.bot.send_chat_action(chat_id=chat_id, action="typing")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ (–±–µ—Ä—ë–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ)
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        file_path = TEMP_DIR / f"{photo.file_id}.jpg"
        await file.download_to_drive(file_path)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Gemini
        uploaded_file = genai.upload_file(file_path)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        caption = update.message.caption or "–ß—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
        chat = model.start_chat(history=chat_histories[chat_id])
        response = chat.send_message([caption, uploaded_file])
        bot_reply = response.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_histories[chat_id].append({
            'role': 'user',
            'parts': [f"[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]: {caption}"]
        })
        chat_histories[chat_id].append({
            'role': 'model',
            'parts': [bot_reply]
        })
        
        formatted_reply = format_text(bot_reply)
        await send_long_message(context, chat_id, formatted_reply)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
        
    except Exception as e:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF, TXT, DOCX –∏ —Ç.–¥.)
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    
    if chat_id not in chat_histories:
        chat_histories[chat_id] = []
    
    await context.bot.send_chat_action(chat_id=chat_id, action="typing")
    
    try:
        document = update.message.document
        file = await context.bot.get_file(document.file_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file_path = TEMP_DIR / document.file_name
        await file.download_to_drive(file_path)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Gemini
        uploaded_file = genai.upload_file(file_path)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        caption = update.message.caption or "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        chat = model.start_chat(history=chat_histories[chat_id])
        response = chat.send_message([caption, uploaded_file])
        bot_reply = response.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_histories[chat_id].append({
            'role': 'user',
            'parts': [f"[–î–æ–∫—É–º–µ–Ω—Ç {document.file_name}]: {caption}"]
        })
        chat_histories[chat_id].append({
            'role': 'model',
            'parts': [bot_reply]
        })
        
        formatted_reply = format_text(bot_reply)
        await send_long_message(context, chat_id, formatted_reply)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
        
    except Exception as e:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    
    if chat_id not in chat_histories:
        chat_histories[chat_id] = []
    
    await context.bot.send_chat_action(chat_id=chat_id, action="typing")
    
    try:
        voice = update.message.voice
        file = await context.bot.get_file(voice.file_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        file_path = TEMP_DIR / f"{voice.file_id}.ogg"
        await file.download_to_drive(file_path)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Gemini
        uploaded_file = genai.upload_file(file_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        prompt = "–†–∞—Å–ø–æ–∑–Ω–∞–π —Ä–µ—á—å –∏–∑ —ç—Ç–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ—Å—å–±—É."
        chat = model.start_chat(history=chat_histories[chat_id])
        response = chat.send_message([prompt, uploaded_file])
        bot_reply = response.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_histories[chat_id].append({
            'role': 'user',
            'parts': ["[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]"]
        })
        chat_histories[chat_id].append({
            'role': 'model',
            'parts': [bot_reply]
        })
        
        formatted_reply = format_text(bot_reply)
        await send_long_message(context, chat_id, formatted_reply)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
        
    except Exception as e:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
        )

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == '__main__':
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('clear', clear_history))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å–æ –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏!")
    application.run_polling()